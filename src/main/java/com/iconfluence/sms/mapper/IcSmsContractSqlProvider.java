package com.iconfluence.sms.mapper;

import com.iconfluence.sms.model.IcSmsContract;
import com.iconfluence.sms.model.IcSmsContractExample.Criteria;
import com.iconfluence.sms.model.IcSmsContractExample.Criterion;
import com.iconfluence.sms.model.IcSmsContractExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class IcSmsContractSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    public String countByExample(IcSmsContractExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("ic_sms_contract");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    public String deleteByExample(IcSmsContractExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("ic_sms_contract");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    public String insertSelective(IcSmsContract record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("ic_sms_contract");
        
        if (record.getGid() != null) {
            sql.VALUES("GID", "#{gid,jdbcType=VARCHAR}");
        }
        
        if (record.getCustomerName() != null) {
            sql.VALUES("CUSTOMER_NAME", "#{customerName,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.VALUES("NAME", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getType() != null) {
            sql.VALUES("TYPE", "#{type,jdbcType=VARCHAR}");
        }
        
        if (record.getTrade() != null) {
            sql.VALUES("TRADE", "#{trade,jdbcType=VARCHAR}");
        }
        
        if (record.getTerm() != null) {
            sql.VALUES("TERM", "#{term,jdbcType=VARCHAR}");
        }
        
        if (record.getContractTime() != null) {
            sql.VALUES("CONTRACT_TIME", "#{contractTime,jdbcType=VARCHAR}");
        }
        
        if (record.getOverTime() != null) {
            sql.VALUES("OVER_TIME", "#{overTime,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("STATUS", "#{status,jdbcType=VARCHAR}");
        }
        
        if (record.getCooperationType() != null) {
            sql.VALUES("COOPERATION_TYPE", "#{cooperationType,jdbcType=VARCHAR}");
        }
        
        if (record.getReturnTime() != null) {
            sql.VALUES("RETURN_TIME", "#{returnTime,jdbcType=VARCHAR}");
        }
        
        if (record.getQuality() != null) {
            sql.VALUES("QUALITY", "#{quality,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("REMARK", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getUid() != null) {
            sql.VALUES("UID", "#{uid,jdbcType=VARCHAR}");
        }
        
        if (record.getProjCode() != null) {
            sql.VALUES("PROJ_CODE", "#{projCode,jdbcType=VARCHAR}");
        }
        
        if (record.getEnName() != null) {
            sql.VALUES("EN_NAME", "#{enName,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    public String selectByExample(IcSmsContractExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("GID");
        } else {
            sql.SELECT("GID");
        }
        sql.SELECT("CUSTOMER_NAME");
        sql.SELECT("NAME");
        sql.SELECT("TYPE");
        sql.SELECT("TRADE");
        sql.SELECT("TERM");
        sql.SELECT("CONTRACT_TIME");
        sql.SELECT("OVER_TIME");
        sql.SELECT("STATUS");
        sql.SELECT("COOPERATION_TYPE");
        sql.SELECT("RETURN_TIME");
        sql.SELECT("QUALITY");
        sql.SELECT("REMARK");
        sql.SELECT("UID");
        sql.SELECT("PROJ_CODE");
        sql.SELECT("EN_NAME");
        sql.FROM("ic_sms_contract");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        IcSmsContract record = (IcSmsContract) parameter.get("record");
        IcSmsContractExample example = (IcSmsContractExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("ic_sms_contract");
        
        if (record.getGid() != null) {
            sql.SET("GID = #{record.gid,jdbcType=VARCHAR}");
        }
        
        if (record.getCustomerName() != null) {
            sql.SET("CUSTOMER_NAME = #{record.customerName,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.SET("NAME = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getType() != null) {
            sql.SET("TYPE = #{record.type,jdbcType=VARCHAR}");
        }
        
        if (record.getTrade() != null) {
            sql.SET("TRADE = #{record.trade,jdbcType=VARCHAR}");
        }
        
        if (record.getTerm() != null) {
            sql.SET("TERM = #{record.term,jdbcType=VARCHAR}");
        }
        
        if (record.getContractTime() != null) {
            sql.SET("CONTRACT_TIME = #{record.contractTime,jdbcType=VARCHAR}");
        }
        
        if (record.getOverTime() != null) {
            sql.SET("OVER_TIME = #{record.overTime,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("STATUS = #{record.status,jdbcType=VARCHAR}");
        }
        
        if (record.getCooperationType() != null) {
            sql.SET("COOPERATION_TYPE = #{record.cooperationType,jdbcType=VARCHAR}");
        }
        
        if (record.getReturnTime() != null) {
            sql.SET("RETURN_TIME = #{record.returnTime,jdbcType=VARCHAR}");
        }
        
        if (record.getQuality() != null) {
            sql.SET("QUALITY = #{record.quality,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("REMARK = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getUid() != null) {
            sql.SET("UID = #{record.uid,jdbcType=VARCHAR}");
        }
        
        if (record.getProjCode() != null) {
            sql.SET("PROJ_CODE = #{record.projCode,jdbcType=VARCHAR}");
        }
        
        if (record.getEnName() != null) {
            sql.SET("EN_NAME = #{record.enName,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("ic_sms_contract");
        
        sql.SET("GID = #{record.gid,jdbcType=VARCHAR}");
        sql.SET("CUSTOMER_NAME = #{record.customerName,jdbcType=VARCHAR}");
        sql.SET("NAME = #{record.name,jdbcType=VARCHAR}");
        sql.SET("TYPE = #{record.type,jdbcType=VARCHAR}");
        sql.SET("TRADE = #{record.trade,jdbcType=VARCHAR}");
        sql.SET("TERM = #{record.term,jdbcType=VARCHAR}");
        sql.SET("CONTRACT_TIME = #{record.contractTime,jdbcType=VARCHAR}");
        sql.SET("OVER_TIME = #{record.overTime,jdbcType=VARCHAR}");
        sql.SET("STATUS = #{record.status,jdbcType=VARCHAR}");
        sql.SET("COOPERATION_TYPE = #{record.cooperationType,jdbcType=VARCHAR}");
        sql.SET("RETURN_TIME = #{record.returnTime,jdbcType=VARCHAR}");
        sql.SET("QUALITY = #{record.quality,jdbcType=VARCHAR}");
        sql.SET("REMARK = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("UID = #{record.uid,jdbcType=VARCHAR}");
        sql.SET("PROJ_CODE = #{record.projCode,jdbcType=VARCHAR}");
        sql.SET("EN_NAME = #{record.enName,jdbcType=VARCHAR}");
        
        IcSmsContractExample example = (IcSmsContractExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(IcSmsContract record) {
        SQL sql = new SQL();
        sql.UPDATE("ic_sms_contract");
        
        if (record.getCustomerName() != null) {
            sql.SET("CUSTOMER_NAME = #{customerName,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.SET("NAME = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getType() != null) {
            sql.SET("TYPE = #{type,jdbcType=VARCHAR}");
        }
        
        if (record.getTrade() != null) {
            sql.SET("TRADE = #{trade,jdbcType=VARCHAR}");
        }
        
        if (record.getTerm() != null) {
            sql.SET("TERM = #{term,jdbcType=VARCHAR}");
        }
        
        if (record.getContractTime() != null) {
            sql.SET("CONTRACT_TIME = #{contractTime,jdbcType=VARCHAR}");
        }
        
        if (record.getOverTime() != null) {
            sql.SET("OVER_TIME = #{overTime,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("STATUS = #{status,jdbcType=VARCHAR}");
        }
        
        if (record.getCooperationType() != null) {
            sql.SET("COOPERATION_TYPE = #{cooperationType,jdbcType=VARCHAR}");
        }
        
        if (record.getReturnTime() != null) {
            sql.SET("RETURN_TIME = #{returnTime,jdbcType=VARCHAR}");
        }
        
        if (record.getQuality() != null) {
            sql.SET("QUALITY = #{quality,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("REMARK = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getUid() != null) {
            sql.SET("UID = #{uid,jdbcType=VARCHAR}");
        }
        
        if (record.getProjCode() != null) {
            sql.SET("PROJ_CODE = #{projCode,jdbcType=VARCHAR}");
        }
        
        if (record.getEnName() != null) {
            sql.SET("EN_NAME = #{enName,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("GID = #{gid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_contract
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, IcSmsContractExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}