package com.iconfluence.sms.mapper;

import com.iconfluence.sms.model.IcSmsCustomerContact;
import com.iconfluence.sms.model.IcSmsCustomerContactExample.Criteria;
import com.iconfluence.sms.model.IcSmsCustomerContactExample.Criterion;
import com.iconfluence.sms.model.IcSmsCustomerContactExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class IcSmsCustomerContactSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    public String countByExample(IcSmsCustomerContactExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("ic_sms_customer_contact");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    public String deleteByExample(IcSmsCustomerContactExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("ic_sms_customer_contact");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    public String insertSelective(IcSmsCustomerContact record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("ic_sms_customer_contact");
        
        if (record.getGid() != null) {
            sql.VALUES("GID", "#{gid,jdbcType=VARCHAR}");
        }
        
        if (record.getCid() != null) {
            sql.VALUES("CID", "#{cid,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.VALUES("NAME", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getSex() != null) {
            sql.VALUES("SEX", "#{sex,jdbcType=INTEGER}");
        }
        
        if (record.getDepartment() != null) {
            sql.VALUES("DEPARTMENT", "#{department,jdbcType=VARCHAR}");
        }
        
        if (record.getPosition() != null) {
            sql.VALUES("POSITION", "#{position,jdbcType=VARCHAR}");
        }
        
        if (record.getQuhao() != null) {
            sql.VALUES("QUHAO", "#{quhao,jdbcType=VARCHAR}");
        }
        
        if (record.getPhone() != null) {
            sql.VALUES("PHONE", "#{phone,jdbcType=VARCHAR}");
        }
        
        if (record.getExtension() != null) {
            sql.VALUES("EXTENSION", "#{extension,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.VALUES("MOBILE", "#{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getQq() != null) {
            sql.VALUES("QQ", "#{qq,jdbcType=VARCHAR}");
        }
        
        if (record.getMsn() != null) {
            sql.VALUES("MSN", "#{msn,jdbcType=VARCHAR}");
        }
        
        if (record.getIcq() != null) {
            sql.VALUES("ICQ", "#{icq,jdbcType=VARCHAR}");
        }
        
        if (record.getEmail() != null) {
            sql.VALUES("EMAIL", "#{email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsImportant() != null) {
            sql.VALUES("IS_IMPORTANT", "#{isImportant,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("REMARK", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("CREATE_TIME", "#{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getFax() != null) {
            sql.VALUES("FAX", "#{fax,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaCode() != null) {
            sql.VALUES("AREA_CODE", "#{areaCode,jdbcType=VARCHAR}");
        }
        
        if (record.getArea() != null) {
            sql.VALUES("AREA", "#{area,jdbcType=VARCHAR}");
        }
        
        if (record.getMainContact() != null) {
            sql.VALUES("MAIN_CONTACT", "#{mainContact,jdbcType=INTEGER}");
        }
        
        if (record.getGrade() != null) {
            sql.VALUES("GRADE", "#{grade,jdbcType=VARCHAR}");
        }
        
        if (record.getLastTime() != null) {
            sql.VALUES("LAST_TIME", "#{lastTime,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    public String selectByExample(IcSmsCustomerContactExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("GID");
        } else {
            sql.SELECT("GID");
        }
        sql.SELECT("CID");
        sql.SELECT("NAME");
        sql.SELECT("SEX");
        sql.SELECT("DEPARTMENT");
        sql.SELECT("POSITION");
        sql.SELECT("QUHAO");
        sql.SELECT("PHONE");
        sql.SELECT("EXTENSION");
        sql.SELECT("MOBILE");
        sql.SELECT("QQ");
        sql.SELECT("MSN");
        sql.SELECT("ICQ");
        sql.SELECT("EMAIL");
        sql.SELECT("IS_IMPORTANT");
        sql.SELECT("REMARK");
        sql.SELECT("CREATE_TIME");
        sql.SELECT("FAX");
        sql.SELECT("AREA_CODE");
        sql.SELECT("AREA");
        sql.SELECT("MAIN_CONTACT");
        sql.SELECT("GRADE");
        sql.SELECT("LAST_TIME");
        sql.FROM("ic_sms_customer_contact");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        IcSmsCustomerContact record = (IcSmsCustomerContact) parameter.get("record");
        IcSmsCustomerContactExample example = (IcSmsCustomerContactExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("ic_sms_customer_contact");
        
        if (record.getGid() != null) {
            sql.SET("GID = #{record.gid,jdbcType=VARCHAR}");
        }
        
        if (record.getCid() != null) {
            sql.SET("CID = #{record.cid,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.SET("NAME = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getSex() != null) {
            sql.SET("SEX = #{record.sex,jdbcType=INTEGER}");
        }
        
        if (record.getDepartment() != null) {
            sql.SET("DEPARTMENT = #{record.department,jdbcType=VARCHAR}");
        }
        
        if (record.getPosition() != null) {
            sql.SET("POSITION = #{record.position,jdbcType=VARCHAR}");
        }
        
        if (record.getQuhao() != null) {
            sql.SET("QUHAO = #{record.quhao,jdbcType=VARCHAR}");
        }
        
        if (record.getPhone() != null) {
            sql.SET("PHONE = #{record.phone,jdbcType=VARCHAR}");
        }
        
        if (record.getExtension() != null) {
            sql.SET("EXTENSION = #{record.extension,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("MOBILE = #{record.mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getQq() != null) {
            sql.SET("QQ = #{record.qq,jdbcType=VARCHAR}");
        }
        
        if (record.getMsn() != null) {
            sql.SET("MSN = #{record.msn,jdbcType=VARCHAR}");
        }
        
        if (record.getIcq() != null) {
            sql.SET("ICQ = #{record.icq,jdbcType=VARCHAR}");
        }
        
        if (record.getEmail() != null) {
            sql.SET("EMAIL = #{record.email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsImportant() != null) {
            sql.SET("IS_IMPORTANT = #{record.isImportant,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("REMARK = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("CREATE_TIME = #{record.createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getFax() != null) {
            sql.SET("FAX = #{record.fax,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaCode() != null) {
            sql.SET("AREA_CODE = #{record.areaCode,jdbcType=VARCHAR}");
        }
        
        if (record.getArea() != null) {
            sql.SET("AREA = #{record.area,jdbcType=VARCHAR}");
        }
        
        if (record.getMainContact() != null) {
            sql.SET("MAIN_CONTACT = #{record.mainContact,jdbcType=INTEGER}");
        }
        
        if (record.getGrade() != null) {
            sql.SET("GRADE = #{record.grade,jdbcType=VARCHAR}");
        }
        
        if (record.getLastTime() != null) {
            sql.SET("LAST_TIME = #{record.lastTime,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("ic_sms_customer_contact");
        
        sql.SET("GID = #{record.gid,jdbcType=VARCHAR}");
        sql.SET("CID = #{record.cid,jdbcType=VARCHAR}");
        sql.SET("NAME = #{record.name,jdbcType=VARCHAR}");
        sql.SET("SEX = #{record.sex,jdbcType=INTEGER}");
        sql.SET("DEPARTMENT = #{record.department,jdbcType=VARCHAR}");
        sql.SET("POSITION = #{record.position,jdbcType=VARCHAR}");
        sql.SET("QUHAO = #{record.quhao,jdbcType=VARCHAR}");
        sql.SET("PHONE = #{record.phone,jdbcType=VARCHAR}");
        sql.SET("EXTENSION = #{record.extension,jdbcType=VARCHAR}");
        sql.SET("MOBILE = #{record.mobile,jdbcType=VARCHAR}");
        sql.SET("QQ = #{record.qq,jdbcType=VARCHAR}");
        sql.SET("MSN = #{record.msn,jdbcType=VARCHAR}");
        sql.SET("ICQ = #{record.icq,jdbcType=VARCHAR}");
        sql.SET("EMAIL = #{record.email,jdbcType=VARCHAR}");
        sql.SET("IS_IMPORTANT = #{record.isImportant,jdbcType=VARCHAR}");
        sql.SET("REMARK = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("CREATE_TIME = #{record.createTime,jdbcType=VARCHAR}");
        sql.SET("FAX = #{record.fax,jdbcType=VARCHAR}");
        sql.SET("AREA_CODE = #{record.areaCode,jdbcType=VARCHAR}");
        sql.SET("AREA = #{record.area,jdbcType=VARCHAR}");
        sql.SET("MAIN_CONTACT = #{record.mainContact,jdbcType=INTEGER}");
        sql.SET("GRADE = #{record.grade,jdbcType=VARCHAR}");
        sql.SET("LAST_TIME = #{record.lastTime,jdbcType=VARCHAR}");
        
        IcSmsCustomerContactExample example = (IcSmsCustomerContactExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(IcSmsCustomerContact record) {
        SQL sql = new SQL();
        sql.UPDATE("ic_sms_customer_contact");
        
        if (record.getCid() != null) {
            sql.SET("CID = #{cid,jdbcType=VARCHAR}");
        }
        
        if (record.getName() != null) {
            sql.SET("NAME = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getSex() != null) {
            sql.SET("SEX = #{sex,jdbcType=INTEGER}");
        }
        
        if (record.getDepartment() != null) {
            sql.SET("DEPARTMENT = #{department,jdbcType=VARCHAR}");
        }
        
        if (record.getPosition() != null) {
            sql.SET("POSITION = #{position,jdbcType=VARCHAR}");
        }
        
        if (record.getQuhao() != null) {
            sql.SET("QUHAO = #{quhao,jdbcType=VARCHAR}");
        }
        
        if (record.getPhone() != null) {
            sql.SET("PHONE = #{phone,jdbcType=VARCHAR}");
        }
        
        if (record.getExtension() != null) {
            sql.SET("EXTENSION = #{extension,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("MOBILE = #{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getQq() != null) {
            sql.SET("QQ = #{qq,jdbcType=VARCHAR}");
        }
        
        if (record.getMsn() != null) {
            sql.SET("MSN = #{msn,jdbcType=VARCHAR}");
        }
        
        if (record.getIcq() != null) {
            sql.SET("ICQ = #{icq,jdbcType=VARCHAR}");
        }
        
        if (record.getEmail() != null) {
            sql.SET("EMAIL = #{email,jdbcType=VARCHAR}");
        }
        
        if (record.getIsImportant() != null) {
            sql.SET("IS_IMPORTANT = #{isImportant,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("REMARK = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("CREATE_TIME = #{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getFax() != null) {
            sql.SET("FAX = #{fax,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaCode() != null) {
            sql.SET("AREA_CODE = #{areaCode,jdbcType=VARCHAR}");
        }
        
        if (record.getArea() != null) {
            sql.SET("AREA = #{area,jdbcType=VARCHAR}");
        }
        
        if (record.getMainContact() != null) {
            sql.SET("MAIN_CONTACT = #{mainContact,jdbcType=INTEGER}");
        }
        
        if (record.getGrade() != null) {
            sql.SET("GRADE = #{grade,jdbcType=VARCHAR}");
        }
        
        if (record.getLastTime() != null) {
            sql.SET("LAST_TIME = #{lastTime,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("GID = #{gid,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ic_sms_customer_contact
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, IcSmsCustomerContactExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}